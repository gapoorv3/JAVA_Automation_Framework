import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.PathItem;
import io.swagger.v3.oas.models.Paths;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.parameters.Parameter;
import io.swagger.v3.oas.models.media.*;
import io.swagger.v3.parser.OpenAPIV3Parser;
import io.swagger.v3.parser.core.models.SwaggerParseResult;

import java.io.*;
import java.util.*;

public class KarateFeatureUpdater {

    public static void main(String[] args) {
        String swaggerUrl = "https://sprint.xprizo.com/swagger/v1/swagger.json"; // Replace with your OpenAPI URL

        // Parse the OpenAPI specification
        SwaggerParseResult parseResult = new OpenAPIV3Parser().readLocation(swaggerUrl, null, null);
        OpenAPI openAPI = parseResult.getOpenAPI();

        if (openAPI == null) {
            System.out.println("Failed to parse OpenAPI specification. Errors: " + parseResult.getMessages());
            return;
        }

        String baseOutputDir = "./generated-karate-features";
        File baseDirectory = new File(baseOutputDir);
        if (!baseDirectory.exists() && !baseDirectory.mkdir()) {
            System.out.println("Failed to create base output directory: " + baseOutputDir);
            return;
        }

        Paths paths = openAPI.getPaths();
        for (Map.Entry<String, PathItem> entry : paths.entrySet()) {
            String path = entry.getKey();
            PathItem pathItem = entry.getValue();

            // Process each HTTP method
            if (pathItem.getGet() != null) {
                processFeatureFile(openAPI, path, "GET", pathItem.getGet(), baseOutputDir);
            }
            if (pathItem.getPost() != null) {
                processFeatureFile(openAPI, path, "POST", pathItem.getPost(), baseOutputDir);
            }
            if (pathItem.getPut() != null) {
                processFeatureFile(openAPI, path, "PUT", pathItem.getPut(), baseOutputDir);
            }
            if (pathItem.getDelete() != null) {
                processFeatureFile(openAPI, path, "DELETE", pathItem.getDelete(), baseOutputDir);
            }
            if (pathItem.getPatch() != null) {
                processFeatureFile(openAPI, path, "PATCH", pathItem.getPatch(), baseOutputDir);
            }
        }
    }

    private static void processFeatureFile(OpenAPI openAPI, String path, String method, Operation operation, String baseOutputDir) {
        if (operation == null) {
            return;
        }

        List<String> tags = operation.getTags();
        String moduleName = (tags != null && !tags.isEmpty()) ? tags.get(0) : "default_module";

        String moduleOutputDir = baseOutputDir + "/" + sanitizeFileName(moduleName);
        File moduleDirectory = new File(moduleOutputDir);
        if (!moduleDirectory.exists() && !moduleDirectory.mkdir()) {
            System.out.println("Failed to create module directory: " + moduleOutputDir);
            return;
        }

        String operationId = operation.getOperationId();
        String fileName = sanitizeFileName(operationId != null ? operationId : (method + "_" + path.replace("/", "_"))) + ".feature";

        // Check both implemented and not-implemented files
        File implementedFile = new File(moduleOutputDir + "/" + fileName.replace("_Not_Implemented", "_Implemented"));
        File notImplementedFile = new File(moduleOutputDir + "/" + fileName);

        if (implementedFile.exists()) {
            updateExistingFeatureFile(implementedFile, openAPI, path, method, operation);
        } else if (notImplementedFile.exists()) {
            updateExistingFeatureFile(notImplementedFile, openAPI, path, method, operation);
        } else {
            generateFeatureFile(openAPI, path, method, operation, moduleOutputDir);
        }
    }

    private static void updateExistingFeatureFile(File featureFile, OpenAPI openAPI, String path, String method, Operation operation) {
        try {
            List<String> existingContent = readFeatureFile(featureFile);
            List<String> updatedContent = new ArrayList<>();
            Set<String> existingKeys = new HashSet<>();
            Set<String> newKeys = new HashSet<>();

            // Extract existing keys from the feature file
            for (String line : existingContent) {
                if (line.trim().startsWith("* param") || line.trim().startsWith("* header") || line.trim().startsWith("* request")) {
                    String[] parts = line.trim().split(" ");
                    if (parts.length > 1) {
                        existingKeys.add(parts[1].replaceAll("=.*", "").trim());
                    }
                }
                updatedContent.add(line);
            }

            // Collect new keys from OpenAPI parameters and request body
            if (operation.getParameters() != null) {
                for (Parameter param : operation.getParameters()) {
                    newKeys.add(param.getName());
                }
            }
            if (operation.getRequestBody() != null) {
                Content content = operation.getRequestBody().getContent();
                for (MediaType media : content.values()) {
                    if (media.getSchema() != null) {
                        newKeys.addAll(extractKeysFromSchema(media.getSchema(), openAPI, new HashSet<>()));
                    }
                }
            }

            // Identify removed keys
            Set<String> removedKeys = new HashSet<>(existingKeys);
            removedKeys.removeAll(newKeys);

            // Identify newly added keys
            Set<String> addedKeys = new HashSet<>(newKeys);
            addedKeys.removeAll(existingKeys);

            // Update content with comments for removed and new keys
            for (int i = 0; i < updatedContent.size(); i++) {
                String line = updatedContent.get(i);
                for (String removedKey : removedKeys) {
                    if (line.contains(removedKey)) {
                        updatedContent.set(i, line + " # REMOVED");
                    }
                }
            }

            for (String addedKey : addedKeys) {
                updatedContent.add("  * param " + addedKey + " = '<value>' # NEW");
            }

            // Write updated content back to the feature file
            try (FileWriter writer = new FileWriter(featureFile)) {
                for (String line : updatedContent) {
                    writer.write(line + "\n");
                }
            }

            System.out.println("Feature file updated: " + featureFile.getPath());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void generateFeatureFile(OpenAPI openAPI, String path, String method, Operation operation, String moduleOutputDir) {
        String fileName = sanitizeFileName(operation.getOperationId() != null ? operation.getOperationId() : (method + "_" + path.replace("/", "_"))) + "_Not_Implemented.feature";
        File featureFile = new File(moduleOutputDir + "/" + fileName);

        try (FileWriter fileWriter = new FileWriter(featureFile)) {
            StringBuilder featureContent = new StringBuilder();

            featureContent.append("# Auto-generated feature file\n\n");
            featureContent.append("Feature: ").append(path).append(" (").append(method).append(")\n\n");
            featureContent.append("Background:\n");
            featureContent.append("  * url baseURL + '").append(path).append("'\n\n");
            featureContent.append("Scenario: ").append(method).append(" ").append(path).append("\n");

            if (operation.getParameters() != null) {
                for (Parameter param : operation.getParameters()) {
                    featureContent.append("  * param ").append(param.getName()).append(" = '<value>'\n");
                }
            }

            if (operation.getRequestBody() != null) {
                Content content = operation.getRequestBody().getContent();
                for (MediaType media : content.values()) {
                    if (media.getSchema() != null) {
                        featureContent.append("  * request ").append(resolveSchema(openAPI, media.getSchema(), new HashSet<>())).append("\n");
                        break;
                    }
                }
            }

            featureContent.append("  When method ").append(method).append("\n");
            featureContent.append("  Then status 200\n");

            fileWriter.write(featureContent.toString());
            System.out.println("Feature file generated: " + featureFile.getPath());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static List<String> readFeatureFile(File featureFile) throws IOException {
        List<String> lines = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(featureFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        }
        return lines;
    }

    private static Set<String> extractKeysFromSchema(Schema<?> schema, OpenAPI openAPI, Set<String> visitedSchemas) {
        Set<String> keys = new HashSet<>();
        if (schema.get$ref() != null) {
            String ref = schema.get$ref();
            String schemaName = ref.substring(ref.lastIndexOf('/') + 1);
            Schema<?> referencedSchema = openAPI.getComponents().getSchemas().get(schemaName);
            if (referencedSchema != null && !visitedSchemas.contains(schemaName)) {
                visitedSchemas.add(schemaName);
                keys.addAll(extractKeysFromSchema(referencedSchema, openAPI, visitedSchemas));
            }
        } else if (schema.getProperties() != null) {
            schema.getProperties().forEach((key, value) -> keys.add(key));
        }
        return keys;
    }

    private static String resolveSchema(OpenAPI openAPI, Schema<?> schema, Set<String> visitedSchemas) {
        if (schema.get$ref() != null) {
            String ref = schema.get$ref();
            String schemaName = ref.substring(ref.lastIndexOf('/') + 1);
            Schema<?> referencedSchema = openAPI.getComponents().getSchemas().get(schemaName);
            if (referencedSchema != null) {
                return resolveSchema(openAPI, referencedSchema, visitedSchemas);
            }
        }
        return "{}";
    }

    private static String sanitizeFileName(String input) {
        return input.replaceAll("[^a-zA-Z0-9_\\-]", "_").replaceAll("\\s+", "_");
    }
}
