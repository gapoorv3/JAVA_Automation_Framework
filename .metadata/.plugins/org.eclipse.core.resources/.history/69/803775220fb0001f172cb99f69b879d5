import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.PathItem;
import io.swagger.v3.oas.models.Paths;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.parameters.Parameter;
import io.swagger.v3.oas.models.media.*;
import io.swagger.v3.parser.OpenAPIV3Parser;
import io.swagger.v3.parser.core.models.SwaggerParseResult;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class KarateFeatureGenerator {

    public static void main(String[] args) {
        String swaggerUrl = "https://sprint.xprizo.com/swagger/v1/swagger.json";  // Your OpenAPI URL

        // Parse the OpenAPI specification
        SwaggerParseResult parseResult = new OpenAPIV3Parser().readLocation(swaggerUrl, null, null);
        OpenAPI openAPI = parseResult.getOpenAPI();

        if (openAPI == null) {
            System.out.println("Failed to parse OpenAPI specification. Errors: " + parseResult.getMessages());
            return;
        }

        // Create base output directory
        String baseOutputDir = "./generated-karate-features";
        File baseDirectory = new File(baseOutputDir);
        if (!baseDirectory.exists() && !baseDirectory.mkdir()) {
            System.out.println("Failed to create base output directory: " + baseOutputDir);
            return;
        }

        // Iterate through the paths (endpoints)
        Paths paths = openAPI.getPaths();
        for (Map.Entry<String, PathItem> entry : paths.entrySet()) {
            String path = entry.getKey();
            PathItem pathItem = entry.getValue();

            // For each HTTP method (GET, POST, PUT, DELETE, PATCH)
            if (pathItem.getGet() != null) {
                generateFeatureFile(openAPI, path, "GET", pathItem.getGet(), baseOutputDir);
            }
            if (pathItem.getPost() != null) {
                generateFeatureFile(openAPI, path, "POST", pathItem.getPost(), baseOutputDir);
            }
            if (pathItem.getPut() != null) {
                generateFeatureFile(openAPI, path, "PUT", pathItem.getPut(), baseOutputDir);
            }
            if (pathItem.getDelete() != null) {
                generateFeatureFile(openAPI, path, "DELETE", pathItem.getDelete(), baseOutputDir);
            }
            if (pathItem.getPatch() != null) {
                generateFeatureFile(openAPI, path, "PATCH", pathItem.getPatch(), baseOutputDir);
            }
        }

        System.out.println("Karate feature files have been generated in the directory: " + baseOutputDir);
    }

    // Method to generate a feature file for each endpoint and HTTP method
    private static void generateFeatureFile(OpenAPI openAPI, String path, String method, Operation operation, String baseOutputDir) {
        if (operation == null) {
            System.out.println("Operation is null for path: " + path + " and method: " + method);
            return;
        }

        // Extract tags to determine the module
        List<String> tags = operation.getTags();
        String moduleName = (tags != null && !tags.isEmpty()) ? tags.get(0) : "default_module";

        // Create module directory
        String moduleOutputDir = baseOutputDir + "/" + sanitizeFileName(moduleName);
        File moduleDirectory = new File(moduleOutputDir);
        if (!moduleDirectory.exists() && !moduleDirectory.mkdir()) {
            System.out.println("Failed to create module directory: " + moduleOutputDir);
            return;
        }

        // Generate a valid filename
        String operationId = operation.getOperationId();
        String fileName = operationId != null ? operationId : (method + "_" + path.replace("/", "_"));
        fileName = sanitizeFileName(fileName);

        // File path
        String filePath = moduleOutputDir + "/" + fileName + ".feature";
        File featureFile = new File(filePath);

        StringBuilder featureContent = new StringBuilder();
        String generatedComment = "# This file was automatically generated. Do not modify unless you know what you're doing.\n\n";
        featureContent.append(generatedComment);

        // Generate new content for the generated sections
        String newParamsSection = generateParamsSection(openAPI, path, method, operation);
        String newRequestBodySection = generateRequestBodySection(openAPI, operation);

        // Generate hashes for the new sections
        String newParamsHash = generateHash(newParamsSection);
        String newRequestBodyHash = generateHash(newRequestBodySection);

        if (featureFile.exists()) {
            // Load the existing content and preserve the manually edited parts
            String existingContent = readFileContent(featureFile);

            // Extract the existing params and request body from the file
            String existingParamsSection = extractSection(existingContent, "# START GENERATED PARAMS", "# END GENERATED PARAMS");
            String existingRequestBodySection = extractRequestBodySection(existingContent);

            // Generate hashes for the existing sections
            String existingParamsHash = generateHash(existingParamsSection);
            String existingRequestBodyHash = generateHash(existingRequestBodySection);

            // Compare the hashes before deciding to update
            if (newParamsHash.equals(existingParamsHash) && newRequestBodyHash.equals(existingRequestBodyHash)) {
                // No changes in generated sections, skip updating the file
                System.out.println("No changes detected in the generated sections, skipping update for file: " + filePath);
                return;
            } else {
                // Changes detected, preserve manually edited sections and update the generated sections
                System.out.println("Changes detected in generated sections, updating the file: " + filePath);
                featureContent = preserveManuallyEditedSections(existingContent, newParamsSection, newRequestBodySection);
            }
        } else {
            // Create new file if it doesn't exist
            featureContent = generateCompleteFeatureContent(openAPI, path, method, operation);
        }

        // Write updated content back to the file
        try (FileWriter fileWriter = new FileWriter(filePath)) {
            fileWriter.write(featureContent.toString());
            System.out.println("Feature file generated/updated: " + filePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to generate hash from a string
    private static String generateHash(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = md.digest(input.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                hexString.append(String.format("%02x", b));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-256 algorithm not available", e);
        }
    }

    // Method to preserve manually edited sections while updating the auto-generated ones
    private static StringBuilder preserveManuallyEditedSections(String existingContent, String newParamsSection, String newRequestBodySection) {
        StringBuilder updatedContent = new StringBuilder();

        // Split the existing content into sections using markers
        String[] sections = existingContent.split("# START GENERATED PARAMS|# END GENERATED PARAMS");

        // First section (before generated parameters) is preserved
        updatedContent.append(sections[0]);

        // Add the new auto-generated section for parameters (overwrite)
        updatedContent.append("# START GENERATED PARAMS\n");
        updatedContent.append(newParamsSection);  // New parameter section
        updatedContent.append("# END GENERATED PARAMS\n");

        // Append the manually edited part after the generated params (from sections[2] if it exists)
        if (sections.length > 2) {
            updatedContent.append(sections[2]);
        }

        // Replace the request body section (if applicable)
        updatedContent = replaceRequestBodySection(updatedContent.toString(), newRequestBodySection);

        return new StringBuilder(updatedContent);
    }

    // Method to generate a complete feature content if no manual edits exist
    private static StringBuilder generateCompleteFeatureContent(OpenAPI openAPI, String path, String method, Operation operation) {
        StringBuilder featureContent = new StringBuilder();
        String generatedComment = "# This file was automatically generated. Do not modify unless you know what you're doing.\n\n";
        featureContent.append(generatedComment);

        // Add Background section with URL
        featureContent.append("Feature: ").append(path).append(" API (").append(method).append(")\n\n");
        featureContent.append("Background:\n");
        featureContent.append("  * url baseURL + '").append(path).append("'\n\n");

        // Start scenario
        featureContent.append("Scenario: ").append(method).append(" ").append(path).append("\n");

        // Add generated params section
        featureContent.append("# START GENERATED PARAMS\n");
        featureContent.append(generateParamsSection(openAPI, path, method, operation));  // Generate params section
        featureContent.append("# END GENERATED PARAMS\n");

        // Handle request body for methods like POST, PUT, PATCH
        featureContent.append(generateRequestBodySection(openAPI, operation));

        // Add HTTP method and expected status
        featureContent.append("  When method ").append(method).append("\n");
        featureContent.append("  Then status 200\n");
        featureContent.append("  # Add further validation here\n");

        return featureContent;
    }

    // Method to generate parameters section (params inside START/END GENERATED PARAM)
    private static String generateParamsSection(OpenAPI openAPI, String path, String method, Operation operation) {
        StringBuilder paramsSection = new StringBuilder();

        List<Parameter> parameters = operation.getParameters();
        if (parameters != null) {
            for (Parameter parameter : parameters) {
                paramsSection.append("  * param ").append(parameter.getName()).append(" = '").append(parameter.getSchema().getType()).append("'\n");
            }
        }

        return paramsSection.toString();
    }

    // Method to generate the request body section
    private static String generateRequestBodySection(OpenAPI openAPI, Operation operation) {
        StringBuilder requestBodySection = new StringBuilder();

        if (operation.getRequestBody() != null && operation.getRequestBody().getContent() != null) {
            for (Map.Entry<String, MediaType> entry : operation.getRequestBody().getContent().entrySet()) {
                MediaType mediaType = entry.getValue();
                Schema schema = mediaType.getSchema();
                if (schema != null) {
                    requestBodySection.append("  * request body = '").append(schema.getType()).append("'\n");
                }
            }
        }

        return requestBodySection.toString();
    }

    // Method to extract a section between markers
    private static String extractSection(String content, String startMarker, String endMarker) {
        int startIdx = content.indexOf(startMarker);
        int endIdx = content.indexOf(endMarker, startIdx);
        if (startIdx >= 0 && endIdx > startIdx) {
            return content.substring(startIdx, endIdx + endMarker.length());
        }
        return "";
    }

    // Method to extract the request body section
    private static String extractRequestBodySection(String content) {
        return extractSection(content, "# START GENERATED REQUEST BODY", "# END GENERATED REQUEST BODY");
    }

    // Utility method to sanitize filenames
    private static String sanitizeFileName(String fileName) {
        return fileName.replaceAll("[^a-zA-Z0-9_-]", "_");
    }

    // Utility method to read file content
    private static String readFileContent(File file) {
        try {
            return new String(java.nio.file.Files.readAllBytes(file.toPath()));
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }
}
